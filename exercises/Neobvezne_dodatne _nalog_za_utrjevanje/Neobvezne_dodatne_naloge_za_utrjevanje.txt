1. Podana je tabela, v kateri je 14 8-bitnih vrednosti:

    TABELA: .byte 1,100,255,24,88,31,56,192,155,224, 0, 101, 199, 47

    a) Napišite program, ki v zanki vse elemente tabele, ki so pozitivni, postavi na -1.
          .text
          
TABELA: .byte 1,100,255,24,88,31,56,192,155,224, 0, 101, 199, 47
          .align   
          .global __start

__start:

          ADR R0, TABELA
          MOV R1, #-1   
          MOV R2, #14  @zanka
ZANKA:
          LDRSB R3, [R0]
          CMP R3,#0
          BLE DALJE
          STRB R1, [R0]
DALJE:    ADD   R0, R0, #1    @naslednji element
          SUBS  R2, R2, #1
          BNE   ZANKA
        

__end:    b __end   





    b) Napišite program, ki v zanki vse elemente tabele, ki so pozitivni, negira (npr. iz 10 spremeni na -10).
          .text
          
TABELA: .byte 1,100,255,24,88,31,56,192,155,224, 0, 101, 199, 47
          .align   
          .global __start

__start:

          ADR R0, TABELA  
          MOV R2, #14  @zanka
ZANKA:
          LDRSB R3, [R0]
          CMP R3,#0
          BLE DALJE
          MOV R1, R3
          SUB R3, R3, R1
          SUB R3, R3, R1
          STRB R3, [R0]
DALJE:    ADD   R0, R0, #1    @naslednji element
          SUBS  R2, R2, #1
          BNE   ZANKA
        

__end:    b __end   





    c) Napišite program, ki v zanki vse elemente tabele, ki so vecji ali enaki -48 in manjši od 48 (predznačeno!) postavi na 0.
          .text
          
TABELA: .byte 1,100,255,24,88,31,56,192,155,224, 0, 101, 199, 47
          .align   
          .global __start

__start:

          ADR R0, TABELA
          MOV R1, #0   
          MOV R2, #14  @stevec
ZANKA:
          LDRSB R3, [R0]
          CMP R3, #-48
          BLT DALJE
          CMP R3,#48
          BGE  DALJE
          STRB  R1, [R0]
DALJE:    ADD   R0, R0, #1    @naslednji element
          SUBS  R2, R2, #1
          BNE   ZANKA
        

__end:    b __end   






2. Z uporabo pogojnih skokov napišite programa, ki ustreza naslednjemu navodilu:
IF A<10 THEN B=B-1 
IF A=10 THEN B=B+1
IF A>10 THEN B=B+2
A in B sta 16-bitni predznačeni spremenljivki.

          .text
A:        .hword 15
B:        .hword 5          

          .align   
          .global __start

__start:
          ADR R0, A
          LDRSH R1, [R0]
          MOV R2, #10
          ADR R0, B
          LDRSH R3, [R0]
          CMP R1, R2
          SUBLT R3, R3, #1
          ADDEQ R3, R3, #1
          ADDGT R3, R3, #2
          STRH R3, [R0]
         
        

__end:    b __end   







3. Z uporabo pogojnih skokov napišite program, ki ustreza naslednjemu navodilu:
IF A=10 THEN
B=B+1
ELSE B=B+2
A in B sta 16-bitni predznačeni spremenljivki.

          .text
A:        .hword 10
B:        .hword 5          

          .align   
          .global __start

__start:
          ADR R0, A
          LDRSH R1, [R0]
          MOV R2, #10
          ADR R0, B
          LDRSH R3, [R0]
          CMP R1, R2
          BNE PRESKOCI
          ADD R3, R3, #1
          B PRESKOCI2
PRESKOCI:
          ADD R3, R3, #2
PRESKOCI2:
          STRH R3, [R0]
         
        

__end:    b __end   






4. Nalogi 2. in 3. rešite s pogojnim izvajanjem ukazov.


5. Z uporabo pogojnega izvajanja ukazov napišite program za iskanje največjega skupnega delitelja (Evklidov algoritem) na
naslednji način (podoben potek algoritma smo obravnavali na vajah) :
ZANKA: PRIMERJAJ r1 in r2
IF r1 > r2 THEN R1=R1-R2 ELSE
    IF r1 < r2 THEN R2=R2-R1

IF r1 != r2 THEN GOTO ZANKA

          .text
A:        .byte 10
B:        .byte 5          

          .align   
          .global __start

__start:
          ADR R0, A
          LDRB R1, [R0]
          ADR R0, B
          LDRB R2, [R0]
ZANKA:    CMP R1, R2
          SUBHI R1, R1, R2
          SUBLO R2, R2, R1
          BNE ZANKA           

         
        

__end:    b __end   







6. Rezervirajte prostor za tabelo 15 32-bitnih elementov. Nato v programski zanki elemente izmenično postavljajte na 1, 0 in -1 (prvi element na 1, drugi na 0, tretji na -1, četrti spet na 1, ...). Program naredite tako, da v register pred zanko naložite konstanto 1 in ga po vsakem vpisu v tabelo zmanjšate za 1. Ko vpišete vrednost -1, register spet postavite na 1 itn.

          .text
TABLE:    .space 60        

          .align   
          .global __start

__start:
          MOV R0, #60
          MOV R1, #-2
          MOV R2, #1
          
ZANKA:                
          STR R2, [R0]
          SUB R2, R2, #1
          
          CMP R1, R2
          BNE PRESKOCI
          MOV R2, #1
PRESKOCI:        
          SUBS  R0, R0, #4
          BNE ZANKA
         

         
        

__end:    b __end   




 