1. Napišite program s programsko zanko, ki ima še eno vgnezdeno zanko. Notranja vgnezdena zanka naj se izvrši 48000-krat in v njej naj se 32-bitna vrednost v r1 vsakič poveča za 1. Zunanja zanka naj se izvede toliko krat, da bo vrednost v r1 na koncu programa enaka 24 000 000, če smo jo na začetku programa nastavili na 0.

/* user code here */


        adr r4, STEVEC
        mov r1, #0
        mov r0, #500
loop1:  ldr r2,[r4]      
loop: add r1,r1,#1
      subs  r2,r2,#1
      bne loop
      subs  r0,r0,#1
      bne loop1      





/* end user code */

/* constants */

LED:   .word     1
STEVEC: .word 48000 
.end


2. Utripanje LED diode na vgrajenem sistemu ARM FRI-SMS

Napišite program, ki bo na vgrajenem sistemu FRI-SMS prižigal in ugašal LED diodo na vsake pol sekunde. Glavni program, ki ga vstavite od mesta, označenega z "/* user code here*/" naprej, lahko opišemo s psevdo kodo takole :

VECNA: Vklop LED diode

                Počakaj 0.5 sekunde

                Izklop LED diode

                Počakaj 0.5 sekunde

                Skoči na VECNA

»Vklop« in »izklop LED diode« dosežete z vpisom vrednosti 1 ali 0 v spremenljivko LED. »Počakaj 0.5 sekunde« pa dosežete z izvedbo dvojne zanke iz naloge 2 – izpustite le povečevanje vrednosti v registru r1, ker ni več potrebno.

Opisano kodo dodate v sveže delovno okolje (»workspace«), ki ga restavrirate iz objavljenega projekta za FRI-SMS (ne tistega za simulator!) na e-učilnici. Ko boste to imeli narejeno, potem se na računalnik priključi vgrajen sistem FRI-SMS, se program prevede in se bo namesto v simulatorju izvajal na pravem vgrajenem sistemu – če je vse v redu bo utripala LED dioda. Če ne deluje, poskusite z iskanjem napake ali pokličite na pomoč asistenta.


1 urina perioda= 1/frekvenca= 1/192*10^6


 1/192*10^6 * 4 (4 cilke)  * 48000= 0,001s = 1ms

ponovim 500* sepravi bo rabli 500ms= 0,5s





/* user code here */

        adr r4, STEVEC
        adr r3, LED
        mov r6,#0
        mov r7,#1

gzanka: str r7,[r3]   @ vklop led

        mov r0, #500
lp1a:   ldr r2,[r4]   @ ldr r2,= 48000   
lp1b:   subs  r2,r2,#1
        bne lp1b
        subs  r0,r0,#1
        bne lp1a    

        str r6,[r3]  @izklop led

        mov r0, #500
lp2a:   ldr r2,[r4]  @  ldr r2,= 48000  
lp2b:   subs  r2,r2,#1
        bne lp2b
        subs  r0,r0,#1
        bne lp2a    

        b gzanka


/* end user code */



/* constants */
 
LED:   .word     1
STEVEC: .word 48000 


3. Dimming lights

     
 
/* user code here */


        
         mov r2,#1
             
         mov r8,#2000
         
         
         mov r9,#1
         mov r7,#2000
        
         
 
zunanja: 

         adr r0,STEV1
         ldr r3,[r0]
         
         notranja:
              subs r3,r3,#1
              bne notranja
         subs r2,r2,#1      
         bne zunanja 
         
        
         
         adr r0,LED
         ldr r4,[r0]
         mov r4,#0
         str r4,[r0]
         
         
       

      
          
         
zunanja2: 

         adr r0,STEV1
         ldr r3,[r0]
         
         
         notranja2:
              
              subs r3,r3,#1
              bne notranja2
         subs r8,r8,#1      
         bne zunanja2 
         
       
        
         adr r0,LED
         ldr r4,[r0]
         mov r4,#1
         str r4,[r0]
         
        
        
    

          
         
         mov r2,r9
           
         mov r8,r7
         
         sub r7,r7,#1
         add r9,r9,#1
         
         cmp r7, #1000
         
         blo popravi
         
         
         mov r10,#1
         mov r2,#1   
         mov r8,#1000
         mov r9,#1
         mov r7,#1000
         
   popravi:
         
         b zunanja
           
    
       


/* end user code */




/* constants */

  .align
_Lstack_end:
  .long __STACK_END__- 2*13*4  @ space for 26 registers on IRQ stack
_Lirqstack_end:
  .long __STACK_END__
 
LED:   .word     1
STEV1: .word 48
 
.end



