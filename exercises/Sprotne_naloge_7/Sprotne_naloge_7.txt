1.	Napišite zaporedje ukazov v zbirniku za procesor ARM, ki v register najprej naloži vrednost 0 
– uporabite takojšnje naslavljanje. 
Kakšno je stanje zastavic Z in N po tem ukazu? Zakaj? Z=1
Nato naj program registru odšteje vrednost 1. 
Kakšna je vrednost registra, če predstavlja nepredznačeno / predznačeno število?
0xffffffff  (max / -1)
Kakšno je stanje zastavic Z, C, V in N po tem ukazu? Zakaj? N=1, Z=0, C=0, V=0
Nato naj program registru prišteje vrednost 2. 
Kakšno je stanje zastavic Z, C, V in N po tem ukazu? Zakaj? N=0, Z=0, C=1, V=0
Kakšna je končna vrednost registra, če predstavlja nepredznačeno / predznačeno število?
1	(1 / +1)



          .text

          .global __start
__start:
@         ukazi              zastavice                 register R0    (nepredzn     predzn)
          movs r0, #0        @N=0, Z=1, C,V= ni vpliva     0          (  0            0   )
          subs r0,r0,#1      @N=1, Z=0, C=0, V=0           0xffffffff ( max           -1  )
          adds r0,r0,#2      @N=0, Z=0, C=1, V=0                1     ( 1             +1  )
          
          
          
          
         

__end:    b __end   

          






2.	Napišite zaporedje ukazov v zbirniku za procesor ARM, ki s pomočjo ALE ukaza v register najprej naloži vrednost 1. 
Kakšni vrednosti imata zastavici Z in N po tem ukazu? Zakaj? N=0, Z=0
Nato naj program odšteje od registra vrednost 1. 
Kakšne vrednosti imajo zastavice Z, C, V in N po tem ukazu? Zakaj? N=0, Z=1, C=1, V=0
Nato naj program še enkrat odšteje vrednost 1 od registra. 
Kakšne vrednosti imajo zastavice Z, C, V in N po tem ukazu? Zakaj? N=1, Z=0, C=0, V=0 
Kakšna je končna vrednost registra, če predstavlja nepredznačeno / predznačeno število?
0xffffffff ( max           -1  )




          .text

          .global __start
__start:
@         ukazi              zastavice                 register R0    (nepredzn     predzn)
          movs r0, #1        @N=0, Z=0, C,V= ni vpliva     1          (  1            +1   )
          subs r0,r0,#1      @N=0, Z=1, C=1, V=0           0          (  0           -1  )
          subs r0,r0,#1      @N=1, Z=0, C=0, V=0           0xffffffff ( max           -1  )
          
          
          
          
         

__end:    b __end   

          





3.	Napišite zaporedje ukazov v zbirniku za procesor ARM, 
ki izračuna izraz STEV1 = STEV2 + STEV3 – STEV1, 
pri čemer je STEV1 16-bitna predznačena spremenljivka, 
TEV2 in STEV3 pa 8-bitni predznačeni spremenljivki z začetnimi vrednostmi 
(določite jih s psevdoukazi): 
STEV1 = -10(10), STEV2 = 64(16), STEV3 = -2(10). 
Preverite pravilnost rezultata!

           .text
STEV1:    .hword  -10
STEV2:    .byte   0x64
STEV3:    .byte   -2
          .align
          .global __start

__start:
          adr R0,STEV1
          ldrsh R1,[R0]
          adr R0,STEV2
          ldrsb R2,[R0]
          adr r0, STEV3
          ldrsb r3,[r0]
          
          adds r4,r2,r3
          subs r1,r4,r1
          
          adr r0,STEV1
          str r1,[r0]
          
          
       
    
          
    
          
__end:    b __end   


