1. Zapišite ukaz v zbirniku za procesor ARM, ki v register R1 naloži konstanto 128. 
Uporabite takojšnje naslavljanje (ukaz MOV). 
mov r1,#128  

Izpišite ustrezen strojni ukaz (32 – bitno število v šestnajstiški obliki). 
od naslova 20 naprej. 
0xE3A01080  (obrnjeno, zaradi little endian)

Program izvajajte po korakih in opazujte vrednosti registrov r15(PC) in R1.
Kakšni sta njuni vrednosti pred izvedbo programa? 
PRED:	R15=PC=	0x20			R1= 0x00

Kakšni sta njuni vrednosti na koncu programa?
PO:		R15=PC=	0x204			R1= 0x80


2. Zapišite ukaz(e) v zbirniku za procesor ARM, ki v register naloži vrednost spremenljivke:

a) naloži 32-bitno vrednost 0x12345678 v register R1
b) naloži 8-bitno vrednost 128 v register R1.
c) naloži 16-bitno vrednost 0xF123 v register R1

STEV1:    .word 0x12345678 
STEV2:    .byte 128
          .align     @poravnava
STEV3:    .hword 0xF123
		  .align      @poravnava

Naloge rešite s posrednim (baznim) naslavljanjem brez odmika preko registra R0.

        adr r0,STEV1  @naslov v r0
        ldr r1,[r0]   @vrednost 
          
        adr r0,STEV2  @naslov v r0
        ldrb r1,[r0]   @vrednost      
          
        adr r0,STEV3  @naslov v r0
        ldrh r1,[r0]   @vrednost           

		    
pred stev3 mora bit align!!! Drugace je napaka.
Uporabljamo little endian.




3. Napišite zaporedje ukazov v zbirniku za procesor ARM, 
ki vrednost 32-bitne spremenljivke STEV1 prepiše v 32-bitno spremenljivko STEV2. 
Nalogo rešite še za primer, če sta spremenljivki STEV1 in STEV2 8-bitni oziroma 16-bitni. 
Vse primere rešite s posrednim (baznim) naslavljanjem brez odmika preko registra R0.

a) 32-bit
          .text
   
STEV1:    .word 0x12345678
STEV2:    .word  

          .global __start
__start:
          adr r0,STEV1  @nalozimo naslov od STEV1 v register
          ldr r1,[r0]   @nalozimo vsebino STEV1 v register (r0 kaze na STEV1)
          adr r0,STEV2  @nalozimo naslov od STEV2 v register
          str r1,[r0]   @shranimo vsebino r1 na lokacijo, ki jo kaze r0(STEV2)
          adr r0,STEV2  @nalozimo naslov od STEV2 v register    (TEST ce dela)
          ldr r2,[r0]   @nalozimo STEV2 v register (r0 kaze na STEV2) (TEST ce dela)

__end:    b __end   












b) 8-bit
          .text
   
STEV1:    .byte 0x12
STEV2:    .byte  

          .align
          .global __start
__start:
          adr r0,STEV1  @nalozimo naslov od STEV1 v register
          ldrb r1,[r0]  @nalozimo vsebino STEV1 v register (r0 kaze na STEV1)
          adr r0,STEV2  @nalozimo naslov od STEV2 v register
          strb r1,[r0]  @shranimo vsebino r1 kamor kaze r0(STEV2)
          adr r0,STEV2  @nalozimo naslov od STEV2 v register          (TEST če dela)
          ldrb r2,[r0]  @nalozimo STEV2 v register (r0 kaze na STEV2) (TEST če dela)
            

__end:    b __end   
















c) 16-bit
          .text
   
STEV1:    .hword 0x1234
STEV2:    .hword
          .align  

          .global __start
__start:
          adr r0,STEV1  @shranimo naslov od STEV1 v register
          ldrh r1,[r0]  @nalozimo vsebino STEV1 v register (r0 kaze na STEV1)
          adr r0,STEV2  @shranimo naslov od STEV2 v register
          strh r1,[r0]  @shranimo vsebino r1 kamor kaze r0(STEV2)
          adr r0,STEV2  @shranimo naslov od STEV2 v register
          ldrh r2,[r0]  @nalozimo STEV2 v register (r0 kaze na STEV2) (TEST če dela)
          

__end:    b __end   




