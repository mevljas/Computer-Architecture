1. Napišite zaporedje ukazov v zbirniku za procesor ARM, ki sešteje 32-bitni spremenljivki STEV1 in STEV2, rezultat pa zapiše v 32-bitno spremenljivko REZ. Nalogo ponovite še za primer, ko spremenljivko STEV2 odštejemo od spremenljivke STEV1. Naredite tudi različice za seštevanje in odštevanje 16-bitnih in 8-bitnih spremenljivk. STEV1 in STEV2 naj imata začetni vrednosti 10(10) in 5(10) zaporedoma, za REZ pa samo rezervirajte prostor.



          .text
STEV1:    .word   10
STEV2:    .word   5
REZ:      .space   4
          .global __start

__start:
          adr R0,STEV1
          ldr R1,[R0]
          ldr R2,[R0,#4]
          @add R3,R2,R1
          sub R3,R2,R1
          adr R0,REZ
          str R3,[R0]  
    
          
    
          
__end:    b __end   

@ b primer


          .text
STEV1:    .hword   10
STEV2:    .hword   5
REZ:      .space   4
          .global __start

__start:
          adr R0,STEV1
          ldrh R1,[R0]
          ldrh R2,[R0,#2]
          add R3,R2,R1
          adr R0,REZ
          strh R3,[R0]  
    
          
    
          
__end:    b __end   




@ c primer



          .text
STEV1:    .byte   10
STEV2:    .byte   5
          .align
REZ:      .space   4
          .global __start

__start:
          adr R0,STEV1
          ldrb R1,[R0]
          ldrb R2,[R0,#1]
          add R3,R2,R1
          adr R0,REZ
          strb R3,[R0]  
    
          
    
          
__end:    b __end   









2. Napišite zaporedje ukazov v zbirniku za procesor ARM, ki izračuna izraz STEV1=STEV2+STEV3–STEV1, pri čemer so STEV1, STEV2 in STEV3 32-bitne spremenljivke z začetnimi vrednostmi (določite jih s psevdoukazi): STEV1 = 50(16), STEV2 = 100(10), STEV3 = 2F(16).


           .text
STEV1:    .word   0x50
STEV2:    .word   100
STEV3:    .word   0x2f
          .global __start

__start:
          adr R0,STEV1
          ldr R1,[R0]
          adr R0,STEV2
          ldr R2,[R0]
          adr r0, STEV3
          ldr r3,[r0]
          
          add r4,r2,r3
          sub r1,r4,r1
          
          adr r0,STEV1
          str r1,[r0]
          
          
       
    
          
    
          
__end:    b __end   










3. Zapišite ukaz(e) v zbirniku za procesor ARM, ki v register naloži vrednost spremenljivke:
a) Nepredznačeno naloži 32-bitno vrednost 0x12345678 v register R1.
b) Nepredznačeno naloži 8-bitno vrednost 128 v register R2.
c) Predznačeno naloži 8-bitno vrednost 128 v register R3.
d) Nepredznačeno naloži 16-bitno vrednost 0xF123 v register R4.
e) Predznačeno naloži 16-bitno vrednost 0xF123 v register R5.

Vse primere rešite s posrednim naslavljanjem preko registra R0.
pomnilnik se napolni z enicami (F)   FFFF......
 



          .text
STEV1:    .word   0x12345678
STEV2:    .byte   128
          .align
STEV3:    .hword   0xF123


          .align
          .global __start

__start:
          adr R0,STEV1
          ldr R1,[R0]
          
          adr r0, STEV2
          ldrb r2,[r0]
          ldrsb r3,[r0]    @predznaceno
          
          adr r0, STEV3
          ldrh r4,[r0]
          ldrsh r5,[r0]     @bredznaceno
          
 
    
          
    
          
__end:    b __end   




